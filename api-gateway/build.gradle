plugins {
    id 'com.moowork.node' version '1.3.1'
    id 'java'
    id 'io.quarkus'
    id 'org.liquibase.gradle' version '2.2.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation enforcedPlatform("${quarkusPlatformGroupId}:quarkus-camel-bom:${quarkusPlatformVersion}")

    implementation "com.intellij:annotations:9.0.4"

    implementation "io.quarkus:quarkus-arc"
    implementation "io.quarkus:quarkus-cache"
    implementation "io.quarkus:quarkus-config-yaml"
    implementation "io.quarkus:quarkus-grpc"
    implementation "io.quarkus:quarkus-hibernate-reactive"
    implementation "io.quarkus:quarkus-hibernate-reactive-panache"
    implementation "io.quarkus:quarkus-hibernate-validator"
    implementation "io.quarkus:quarkus-micrometer"
    implementation "io.quarkus:quarkus-micrometer-registry-prometheus"
    implementation "io.quarkus:quarkus-reactive-pg-client"
    implementation "io.quarkus:quarkus-resteasy-reactive"
    implementation "io.quarkus:quarkus-resteasy-reactive-jackson"
    implementation "io.quarkus:quarkus-smallrye-jwt"
    implementation "io.quarkus:quarkus-smallrye-jwt-build"
    implementation "io.quarkus:quarkus-smallrye-openapi"

    implementation "org.apache.camel.quarkus:camel-quarkus-mapstruct"
    implementation "org.apache.camel.quarkus:camel-quarkus-zipfile"
    implementation "org.apache.commons:commons-lang3:3.13.0"

    compileOnly "org.projectlombok:lombok:$libVers.lombok"

    annotationProcessor "org.mapstruct:mapstruct-processor:$libVers.mapstruct"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    annotationProcessor "org.projectlombok:lombok:$libVers.lombok"
    annotationProcessor project(":spi-mapstruct-impl")

    liquibaseRuntime 'info.picocli:picocli:4.6.3'
    liquibaseRuntime group: 'org.slf4j', name: 'slf4j-api', version: libVers.slf4j
    liquibaseRuntime group: 'org.slf4j', name: 'slf4j-simple', version: libVers.slf4j
    liquibaseRuntime group: 'org.liquibase', name: 'liquibase-core', version: libVers.liquibase
    liquibaseRuntime group: 'org.liquibase', name: 'liquibase-gradle-plugin', version: libVers.liquibase_gradle_plugin
    liquibaseRuntime group: 'org.postgresql', name: 'postgresql', version: libVers.org_postgresql

    testImplementation "com.google.guava:guava:$libVers.guava"
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.quarkus:quarkus-junit5-mockito"
    testImplementation "io.quarkus:quarkus-panache-mock"
    testImplementation "io.quarkus:quarkus-reactive-pg-client-deployment"
    testImplementation "io.quarkus:quarkus-test-security"
    testImplementation "io.quarkus:quarkus-test-vertx"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.zonky.test:embedded-postgres:$libVers.embedded_postgres"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:$libVers.equalsverifier"
    testImplementation "org.liquibase:liquibase-core:$libVers.liquibase"
    testImplementation "org.mockito:mockito-core:$libVers.mockito_core"

    testAnnotationProcessor "org.mapstruct:mapstruct-processor:$libVers.mapstruct"
}

group 'su.svn.daybook3'
version '3.10.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    environment "LC_ALL", "en_US.UTF-8"
    environment "LC_CTYPE", "en_US.UTF-8"
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    testLogging.showStandardStreams = false
    useJUnitPlatform()
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

apply from: "${rootDir}/gradle/helpers/generators.gradle"
apply from: "${rootDir}/gradle/helpers/liquibase.gradle"
apply from: "${rootDir}/gradle/helpers/ssl.gradle"

tasks.processResources.dependsOn("startOpenSSLGenRsa", "startOpenSSLPubKey", "startOpenSSLPrivKey")
