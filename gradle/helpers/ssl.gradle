task start01OpenSSLGenRsa(type: Exec) {
    workingDir = getProperty("src.main.resources")
    executable "openssl"
    args "genrsa", "-out", "rsaPrivateKey.pem", "2048"
}

start01OpenSSLGenRsa.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    def file = new File("$submodule/${getProperty("src.main.resources")}/rsaPrivateKey.pem")
    !file?.exists()
}

task start02OpenSSLPubKey(type: Exec) {
    workingDir = getProperty("src.main.resources")
    executable "openssl"
    args "rsa", "-pubout", "-in", "rsaPrivateKey.pem", "-out", "publicKey.pem"
}

start02OpenSSLPubKey.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    def file = new File("$submodule/${getProperty("src.main.resources")}/publicKey.pem")
    !file?.exists()
}

task start03OpenSSLPrivKey(type: Exec) {
    workingDir = getProperty("src.main.resources")
    executable "openssl"
    args "pkcs8", "-topk8", "-nocrypt", "-inform", "pem", "-in", "rsaPrivateKey.pem", "-outform", "pem", "-out", "privateKey.pem"
}

start03OpenSSLPrivKey.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    def file = new File("$submodule/${getProperty("src.main.resources")}/privateKey.pem")
    !file?.exists()
}

task start04OpenSSLReq(type: Exec) {
    workingDir = getProperty("src.main.resources")
    executable "openssl"
    args "req", "-new", "-noenc", "-out", "localhost.csr", "-subj", "/CN=localhost", "-addext", "subjectAltName=DNS:localhost,DNS:*.localhost"
}

start04OpenSSLReq.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    def file = new File("$submodule/${getProperty("src.main.resources")}/localhost.csr")
    !file?.exists()
}

task start05OpenSSLRsa(type: Exec) {
    workingDir = getProperty("src.main.resources")
    executable "openssl"
    args "rsa", "-in", "rsaPrivateKey.pem", "-out", "localhost-key.pem"
}

start05OpenSSLRsa.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    def file = new File("$submodule/${getProperty("src.main.resources")}/localhost-key.pem")
    !file?.exists()
}

task start06OpenSSLx509(type: Exec) {
    workingDir = getProperty("src.main.resources")
    executable "openssl"
    args "x509", "-extfile", 'localhost-san.txt', "-in", "localhost.csr", "-out", "localhost-cert.pem", "-req", "-signkey", "localhost-key.pem", "-days", "9999"
}

start06OpenSSLx509.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    def file = new File("$submodule/${getProperty("src.main.resources")}/localhost-cert.pem")
    !file?.exists()
}

task start07OpenSSLpkcs12(type: Exec) {
    workingDir = getProperty("src.main.resources")
    executable "openssl"
    args "pkcs12", "-export", "-noenc", "-in", "localhost-cert.pem", "-inkey", "localhost-key.pem", "-passout", "pass:", "-name", "localhost-p12", "-out", "localhost.p12"
}

start07OpenSSLpkcs12.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    def file = new File("$submodule/${getProperty("src.main.resources")}/localhost.p12")
    !file?.exists()
}

task copySSL(type: Copy) {
    /** copy SSL files */
    def workingDir = getProperty("src.main.resources")
    def destine = "${rootDir}/auth-user/src/main/resources/"
    from "$workingDir"
    into "$destine"
    eachFile {
        if (!it.path.toString().contains(".pem") && !it.path.toString().contains(".keystore")) {
            it.exclude()
        } else if (it.getRelativePath().getFile(project.file("$destine")).exists()) {
            println "$it.path exists at destination, skipping it"
            it.exclude()
        }
    }
    doLast {
        println "api-container conf assets copied"
    }
}

copySSL.onlyIf {
    def taskPath = it.path.toString()
    def submodule = taskPath.split(":")[1]
    submodule == "api-gateway"
}