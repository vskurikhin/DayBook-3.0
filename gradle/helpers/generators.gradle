import org.apache.tools.ant.filters.ReplaceTokens

import java.util.regex.Matcher
import java.util.regex.Pattern

static String toCamelCase(String text, boolean capitalized = false) {
    text = text.replaceAll("(_)([A-Za-z0-9])", { Object[] it -> it[2].toUpperCase() })
    return capitalized ? text.capitalize() : text
}

static String toSnakeCase(String text) {
    text.replaceAll(/([A-Z])/, /_$1/).toLowerCase().replaceAll(/^_/, '')
}

static String getLastVersion(String content) {
    String regex = "--changeset[\\s]+[^\\s]+:(\\d+)"
    Matcher matcher = Pattern.compile(regex).matcher(content)

    while (matcher.find()) {
        return Integer.valueOf(matcher.group(1)) + 4
    }
    return "1"
}

// номер changeset всегда должен быть уникальным!!!
static def getLastVersionFile(String folder) {
    def files = new File(folder).listFiles()?.sort { it.getName() }
    def file = files.size() > 0 ? files?.last() : null
    if (Objects.isNull(file)) {
        return "1"
    }
    String fileContents = file.getText('UTF-8')
    return getLastVersion(fileContents)
}

static String getChangeSetFileName(String scriptName, String version) {
    def date = new Date()
    def formattedDate = date.format("yyyy_MM_dd")
    def formattedTime = date.format("HH_mm_ss")
    return "${version}_date_${formattedDate}_time_${formattedTime}_${scriptName}.sql"
}

def getProjectProperty(key, defaultValue) {
    return project.getProperties().get(key) ?: defaultValue
}

@SuppressWarnings('GrMethodMayBeStatic')
private String getChangeSetFolderPath(String projectDir) {
    def changeset = "${getProperty("src.main.resources")}/${getProperty("changeset")}".toString()
    return null == projectDir || projectDir.isEmpty()
            ? "${projectDir}/${changeset}".toString()
            : changeset
}

task generate() {
    doLast {
        def task = this.getProjectProperty('task', 'issue_1')
        def desc = this.getProjectProperty('desc', 'migration')
        def scriptName = "${task}_${desc}"
        def folderPath = getChangeSetFolderPath(project.projectDir.toString())

        def version = getLastVersionFile(folderPath + "/")
        def fileName = getChangeSetFileName(scriptName, version)
        def filePath = "${folderPath}/${fileName}"
        def logicalFilePath = "${getChangeSetFolderPath()}/${fileName}"

        def changeSetAuthor = java.util.Optional
                .ofNullable(System.getProperty("username"))
                .orElse(System.getenv("USER"))

        List<String> sample = [
                '--liquibase formatted sql', '--', '', '--',
                "--changeset ${changeSetAuthor}:${version} endDelimiter:; failOnError:true logicalFilePath:${logicalFilePath}",
                '--', '', '--',
                '-- << COMMAND HERE >>', '--', '',
                '--', '--rollback',
                ''] as String[]
        // create the file and write text to it.
        def file = new File(filePath)
        file.text = sample.join("\n")
        println "File created ${file.getAbsolutePath()}"
    }
}

private void genDictionary(template, projectDir, to, suffix = "") {
    def templateFileName = template.toPath().fileName.toString()
    def name = this.getProjectProperty('table', 'value_type').toString()
    def schema = this.getProjectProperty('schema', 'dictionary').toString()
    def idType = this.getProjectProperty('IdType', 'Long').toString()
    def key = this.getProjectProperty('key', 'key').toString()
    def keyType = this.getProjectProperty('KType', 'String').toString()
    def value = this.getProjectProperty('value', 'value').toString()
    def valueType = this.getProjectProperty('VType', 'String').toString()
    def uuid = UUID.randomUUID().toString()
    copy {
        from template
        filter ReplaceTokens, tokens: [
                serialVersionUID: new Random().nextLong().toString(),
                IdType          : idType,
                KType           : keyType,
                Key             : key.capitalize(),
                Name            : toCamelCase(name, true),
                SCHEMA          : schema.toUpperCase(),
                TABLE           : name.toUpperCase(),
                VType           : valueType,
                Value           : value.capitalize(),
                key             : key,
                name            : toCamelCase(name, false),
                schema          : schema,
                table           : name,
                uuid            : uuid,
                value           : value
        ]
        into projectDir + '/' + to
        rename { filename ->
            filename.replace templateFileName, toCamelCase(name, true) + suffix + '.java'
        }
    }
}

private void genSql(File template, resourcesDb, resourcesDbPath, dbName, prefix = 'create') {
    def templateFileName = template.toPath().fileName.toString()
    def task = this.getProjectProperty('task', 'issue_1')
    def name = this.getProjectProperty('table', 'value_type').toString()
    def schema = this.getProjectProperty('schema', 'dictionary').toString()
    def key = this.getProjectProperty('key', 'key').toString()

    def desc = prefix + '_' + name
    def scriptName = "${task}_${desc}"
    def folderPath = getChangeSetFolderPath(project.projectDir.toString())
    def version = getLastVersionFile(folderPath + "/")
    def fileName = getChangeSetFileName(scriptName, version)
    def logicalFilePath = "${folderPath}/${fileName}"

    def changeSetAuthor = java.util.Optional
            .ofNullable(System.getProperty("username"))
            .orElse(System.getenv("USER"))

    copy {
        from template
        filter ReplaceTokens, tokens: [
                schema         : schema,
                table          : name,
                key            : key,
                value          : 'value',
                version        : version,
                rnd            : (1000 + new Random().nextInt(8999)).toString(),
                logicalFilePath: logicalFilePath.toString(),
                changeSetAuthor: changeSetAuthor
        ]
        into folderPath
        rename { filename ->
            filename.replace templateFileName, fileName
        }
    }
}

task generator() {
    def dao = new File("src/templates/DictionaryDao.java")
    def table = new File("src/templates/DictionaryTable.java")
    def model = new File("src/templates/Dictionary.java")
    def resource = new File("src/templates/DictionaryResource.java")
    def cacheProvider = new File("src/templates/DictionaryCacheProvider.java")
    def dataService = new File("src/templates/DictionaryDataService.java")
    def mapper = new File("src/templates/DictionaryMapper.java")
    def service = new File("src/templates/DictionaryService.java")
    def tableTest = new File("src/templates/DictionaryTableTest.java")
    def test = new File("src/templates/DictionaryTest.java")
    def serviceTest = new File("src/templates/DictionaryServiceTest.java")
    def testIT = new File("src/templates/DictionaryDataBaseIT.java")
    def createTable = new File("src/templates/create_table.sql")
    def tableTriggers = new File("src/templates/triggers_table.sql")
    def indexOnTable = new File("src/templates/idx_table.sql")
    doLast {
        genDictionary(dao, projectDir, "src/main/java/su/svn/daybook/domain/dao", "Dao")
        genDictionary(table, projectDir, "src/main/java/su/svn/daybook/domain/model", "Table")
        genDictionary(model, projectDir, "src/main/java/su/svn/daybook/models/domain")
        genDictionary(resource, projectDir, "src/main/java/su/svn/daybook/resources", "Resource")
        genDictionary(cacheProvider, projectDir, "src/main/java/su/svn/daybook/services/cache", "CacheProvider")
        genDictionary(dataService, projectDir, "src/main/java/su/svn/daybook/services/domain", "DataService")
        genDictionary(mapper, projectDir, "src/main/java/su/svn/daybook/services/mappers", "Mapper")
        genDictionary(service, projectDir, "src/main/java/su/svn/daybook/services/models", "Service")
        genDictionary(tableTest, projectDir, "src/test/java/su/svn/daybook/domain/model", "TableTest")
        genDictionary(test, projectDir, "src/test/java/su/svn/daybook/models/domain", "Test")
        genDictionary(serviceTest, projectDir, "src/test/java/su/svn/daybook/services/models", "ServiceTest")
        genDictionary(testIT, projectDir, "src/test/java/su/svn/daybook", "DataBaseIT")
        genSql(createTable, resourcesDb, resourcesDbPath, schemaName)
        genSql(tableTriggers, resourcesDb, resourcesDbPath, schemaName, 'triggers')
        genSql(indexOnTable, resourcesDb, resourcesDbPath, schemaName, 'idx')
    }
}